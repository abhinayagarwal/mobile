#
# Copyright (c) 2022, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

name: 'Upload bundles'
description: 'Upload resulting JDK bundles'
inputs:
  platform:
    description: 'Platform name'
    required: true
  debug-suffix:
    description: 'File name suffix denoting debug level, possibly empty'
    required: false
  make-target:
    description: 'Make target'
    required: false

runs:
  using: composite
  steps:

    - name: 'Determine bundle names'
      id: bundles
      run: |
        # Rename bundles to consistent names
        jdk_bundle_zip="$(ls build/*/bundles/jdk-*_bin${{ inputs.debug-suffix }}.zip 2> /dev/null || true)"
        jdk_bundle_tar_gz="$(ls build/*/bundles/jdk-*_bin${{ inputs.debug-suffix }}.tar.gz 2> /dev/null || true)"
        symbols_bundle="$(ls build/*/bundles/jdk-*_bin${{ inputs.debug-suffix }}-symbols.tar.gz 2> /dev/null || true)"
        tests_bundle="$(ls build/*/bundles/jdk-*_bin-tests${{ inputs.debug-suffix }}.tar.gz 2> /dev/null || true)"

        mkdir bundles

        if [[ "$jdk_bundle_zip" != "" ]]; then
          mv "$jdk_bundle_zip" "bundles/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.zip"
        fi
        if [[ "$jdk_bundle_tar_gz" != "" ]]; then
          mv "$jdk_bundle_tar_gz" "bundles/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz"
        fi
        if [[ "$symbols_bundle" != "" ]]; then
          mv "$symbols_bundle" "bundles/symbols-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz"
        fi
        if [[ "$tests_bundle" != "" ]]; then
          mv "$tests_bundle" "bundles/tests-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz"
        fi

        if [[ "$jdk_bundle_zip$jdk_bundle_tar_gz$symbols_bundle$tests_bundle" != "" ]]; then
          echo 'bundles-found=true' >> $GITHUB_OUTPUT
        else
          echo 'bundles-found=false' >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: 'Create libjdk.a'
      run: |
        cd build
        mkdir -p "${{ inputs.platform }}/allobjs"
        cd "${{ inputs.platform }}/allobjs"
        find .. -name "*.a" -exec ar x {} \;
        ar rcs ../libjdk.a *.o
        cd ..
        rm -rf allobjs
      shell: bash
      if: inputs.make-target == 'static-libs' && inputs.debug-suffix != '-debug' && !startsWith(inputs.platform, 'windows')

    - name: 'List all *.lib files'
      run: |
        Get-ChildItem -Path .\build -Filter *.lib -Recurse
      shell: pwsh
      if: inputs.make-target == 'static-libs' && inputs.debug-suffix != '-debug' && startsWith(inputs.platform, 'windows')

    - name: 'Create libjdk.lib for windows'
      run: |
        # Define the root path where to start the search
        $searchRoot = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC"
        
        # Search for lib.exe using a wildcard for the version
        $libPath = Get-ChildItem -Path $searchRoot -Recurse -Filter "lib.exe" -ErrorAction SilentlyContinue | Where-Object { $_.FullName -like "*14.29*\bin\Hostx64\x64\lib.exe" }
        
        # Check if libPath is not empty
        if ($libPath) {
          # Store the full path of the first found lib.exe (if there are multiple, you can adjust as needed)
          $libPath = $libPath[0].FullName
          Write-Output "Found lib.exe at: $libPath"
        
          # Change directory to where .lib files are located
          cd build
        
          # Create the platform-specific directory
          $platformDir = "${{ inputs.platform }}"
          if (-not (Test-Path $platformDir)) {
            New-Item -Path $platformDir -ItemType Directory
          }
        
          # Collect all .lib files in the directory and subdirectories
          $libFiles = Get-ChildItem -Path . -Filter *.lib -Recurse | Select-Object -ExpandProperty FullName
        
          # Check if any .lib files were found
          if ($libFiles.Count -eq 0) {
            Write-Output "No .lib files found in the specified directory."
            exit 1
          }
        
          # Prepare the command arguments
          $arguments = "/OUT:$platformDir\libjdk.lib " + ($libFiles -join " ")
        
          # Construct the command
          $command = "& `"$libPath`" $arguments"
        
          # Execute the command
          Write-Output "Executing command: $command"
          Invoke-Expression $command
        
          # Check if the output file was created
          if (Test-Path "$platformDir\libjdk.lib") {
            Write-Output "Successfully created libjdk.lib"
          } else {
            Write-Output "Failed to create libjdk.lib"
            exit 1
          }
        } else {
          Write-Output "lib.exe not found."
          exit 1
        }
      shell: pwsh
      if: inputs.make-target == 'static-libs' && inputs.debug-suffix != '-debug' && startsWith(inputs.platform, 'windows')

    - name: 'Upload bundles artifact'
      uses: actions/upload-artifact@v4
      with:
        name: bundles-${{ inputs.platform }}${{ inputs.debug-suffix }}
        path: bundles
        retention-days: 1
      if: steps.bundles.outputs.bundles-found == 'true' && inputs.make-target != 'static-libs'

    - name: 'Upload static image artifact'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.platform }}
        path: build/${{ inputs.platform }}
        retention-days: 1
      if: inputs.make-target == 'static-libs' && inputs.debug-suffix != '-debug'
